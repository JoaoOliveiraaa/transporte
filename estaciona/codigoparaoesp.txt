#include <WiFi.h>
#include <WebServer.h>

// Configurações da rede WiFi
const char* ssid = "S24";  // Substitua pelo nome da sua rede WiFi
const char* password = "santastico";  // Substitua pela senha da sua rede WiFi

// Configuração do servidor web
WebServer server(80);

// Pinos dos sensores ultrassônicos
#define TRIG_PIN1 5
#define ECHO_PIN1 18
#define TRIG_PIN2 19
#define ECHO_PIN2 21

// Função para medir distância
float getDistance(int trigPin, int echoPin) {
  long duration;
  float distance;

  // Garante que apenas um sensor é ativado por vez
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH, 30000); // Timeout de 30ms
  if (duration == 0) {
    return -1; // Indica erro (sensor não respondeu)
  }
  distance = duration * 0.034 / 2;

  delay(50); // Evita interferência entre os sensores
  return distance;
}

// Manipulador para enviar o estado das vagas
void handleRoot() {
  float distance1 = getDistance(TRIG_PIN1, ECHO_PIN1);
  delay(50); // Pequeno atraso antes de medir o próximo sensor
  float distance2 = getDistance(TRIG_PIN2, ECHO_PIN2);

  // Logs para depuração
  Serial.print("Distância Vaga 1: ");
  Serial.println(distance1);
  Serial.print("Distância Vaga 2: ");
  Serial.println(distance2);

  // Determinação do estado das vagas
  String vaga1Status = (distance1 >= 0 && distance1 < 11.0) ? "Ocupada" : "Livre";
  String vaga2Status = (distance2 >= 0 && distance2 < 11.0) ? "Ocupada" : "Livre";

  // Geração da resposta em JSON
  String response = "{";
  response += "\"vaga1\": \"" + vaga1Status + "\",";
  response += "\"vaga2\": \"" + vaga2Status + "\"";
  response += "}";

  // Envio da resposta
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "application/json", response);
}

void setup() {
  // Configuração inicial
  Serial.begin(115200);

  // Configuração dos pinos dos sensores
  pinMode(TRIG_PIN1, OUTPUT);
  pinMode(ECHO_PIN1, INPUT);
  pinMode(TRIG_PIN2, OUTPUT);
  pinMode(ECHO_PIN2, INPUT);

  // Conexão WiFi
  WiFi.begin(ssid, password);
  Serial.print("Conectando-se ao WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConectado ao WiFi!");
  Serial.print("IP do dispositivo: ");
  Serial.println(WiFi.localIP());

  // Configuração do servidor
  server.on("/", handleRoot);
  server.begin();
  Serial.println("Servidor iniciado!");
}

void loop() {
  // Mantém o servidor rodando
  server.handleClient();
}
